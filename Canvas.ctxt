#BlueJ class context
comment0.params=title
comment0.target=Canvas(java.lang.String)
comment0.text=\r\n\ Create\ a\ Canvas\ with\ default\ height,\ width\ and\ background\ color\ \r\n\ (300,\ 300,\ white).\r\n\ @param\ title\ \ title\ to\ appear\ in\ Canvas\ Frame\ \ \ \ \ \r\n
comment1.params=title\ width\ height
comment1.target=Canvas(java.lang.String,\ int,\ int)
comment1.text=\r\n\ Create\ a\ Canvas\ with\ default\ background\ color\ (white).\r\n\ @param\ title\ \ title\ to\ appear\ in\ Canvas\ Frame\r\n\ @param\ width\ \ the\ desired\ width\ for\ the\ canvas\r\n\ @param\ height\ \ the\ desired\ height\ for\ the\ canvas\r\n
comment10.params=xPos\ yPos\ diameter
comment10.target=void\ drawCircle(double,\ double,\ double)
comment11.params=xPos\ yPos\ width\ height
comment11.target=void\ drawRectangle(double,\ double,\ double,\ double)
comment12.params=xPos\ yPos\ width\ height
comment12.target=void\ fillRectangle(int,\ int,\ int,\ int)
comment12.text=\r\n\ Fill\ the\ internal\ dimensions\ of\ the\ given\ rectangle\ with\ the\ current\ \r\n\ foreground\ color\ of\ the\ canvas.\ This\ is\ a\ convenience\ method.\ A\ similar\ \r\n\ effect\ can\ be\ achieved\ with\ the\ "fill"\ method.\r\n
comment13.params=
comment13.target=void\ erase()
comment13.text=\r\n\ Erase\ the\ whole\ canvas.\r\n
comment14.params=xPos\ yPos\ diameter
comment14.target=void\ eraseCircle(double,\ double,\ double)
comment14.text=\r\n\ Erase\ the\ internal\ dimensions\ of\ the\ given\ circle.\ This\ is\ a\ \r\n\ convenience\ method.\ A\ similar\ effect\ can\ be\ achieved\ with\r\n\ the\ "erase"\ method.\r\n
comment15.params=xPos\ yPos\ width\ height
comment15.target=void\ eraseRectangle(int,\ int,\ int,\ int)
comment15.text=\r\n\ Erase\ the\ internal\ dimensions\ of\ the\ given\ rectangle.\ This\ is\ a\ \r\n\ convenience\ method.\ A\ similar\ effect\ can\ be\ achieved\ with\r\n\ the\ "erase"\ method.\r\n
comment16.params=shape
comment16.target=void\ erase(java.awt.Shape)
comment16.text=\r\n\ Erase\ a\ given\ shape's\ interior\ on\ the\ screen.\r\n\ @param\ \ shape\ \ the\ shape\ object\ to\ be\ erased\ \r\n
comment17.params=shape
comment17.target=void\ eraseOutline(java.awt.Shape)
comment17.text=\r\n\ Erases\ a\ given\ shape's\ outline\ on\ the\ screen.\r\n\ @param\ \ shape\ \ the\ shape\ object\ to\ be\ erased\ \r\n
comment18.params=image\ x\ y
comment18.target=boolean\ drawImage(java.awt.Image,\ int,\ int)
comment18.text=\r\n\ Draws\ an\ image\ onto\ the\ canvas.\r\n\ @param\ \ image\ \ \ the\ Image\ object\ to\ be\ displayed\ \r\n\ @param\ \ x\ \ \ \ \ \ \ x\ co-ordinate\ for\ Image\ placement\ \r\n\ @param\ \ y\ \ \ \ \ \ \ y\ co-ordinate\ for\ Image\ placement\ \r\n\ @return\ \ returns\ boolean\ value\ representing\ whether\ the\ image\ was\ \r\n\ \ \ \ \ \ \ \ \ \ completely\ loaded\ \r\n
comment19.params=text\ x\ y
comment19.target=void\ drawString(java.lang.String,\ int,\ int)
comment19.text=\r\n\ Draws\ a\ String\ on\ the\ Canvas.\r\n\ @param\ \ text\ \ \ the\ String\ to\ be\ displayed\ \r\n\ @param\ \ x\ \ \ \ \ \ x\ co-ordinate\ for\ text\ placement\ \r\n\ @param\ \ y\ \ \ \ \ \ y\ co-ordinate\ for\ text\ placement\r\n
comment2.params=title\ width\ height\ bgColor
comment2.target=Canvas(java.lang.String,\ int,\ int,\ java.awt.Color)
comment2.text=\r\n\ Create\ a\ Canvas.\r\n\ @param\ title\ \ title\ to\ appear\ in\ Canvas\ Frame\r\n\ @param\ width\ \ the\ desired\ width\ for\ the\ canvas\r\n\ @param\ height\ \ the\ desired\ height\ for\ the\ canvas\r\n\ @param\ bgClour\ \ the\ desired\ background\ color\ of\ the\ canvas\r\n\ this\ -\ establishes\ the\ origin,\ the\ height,\ and\ the\ width\r\n
comment20.params=text\ x\ y
comment20.target=void\ eraseString(java.lang.String,\ int,\ int)
comment20.text=\r\n\ Erases\ a\ String\ on\ the\ Canvas.\r\n\ @param\ \ text\ \ \ \ \ the\ String\ to\ be\ displayed\ \r\n\ @param\ \ x\ \ \ \ \ \ \ \ x\ co-ordinate\ for\ text\ placement\ \r\n\ @param\ \ y\ \ \ \ \ \ \ \ y\ co-ordinate\ for\ text\ placement\r\n
comment21.params=x1\ y1\ x2\ y2
comment21.target=void\ drawLine(int,\ int,\ int,\ int)
comment21.text=\r\n\ Draws\ a\ line\ on\ the\ Canvas.\r\n\ @param\ \ x1\ \ \ x\ co-ordinate\ of\ start\ of\ line\ \r\n\ @param\ \ y1\ \ \ y\ co-ordinate\ of\ start\ of\ line\ \r\n\ @param\ \ x2\ \ \ x\ co-ordinate\ of\ end\ of\ line\ \r\n\ @param\ \ y2\ \ \ y\ co-ordinate\ of\ end\ of\ line\ \r\n
comment22.params=s
comment22.target=void\ setStroke(int)
comment23.params=newColor
comment23.target=void\ setForegroundColor(java.awt.Color)
comment23.text=\r\n\ Sets\ the\ foreground\ color\ of\ the\ Canvas.\r\n\ @param\ \ newColor\ \ \ the\ new\ color\ for\ the\ foreground\ of\ the\ Canvas\ \r\n
comment24.params=
comment24.target=java.awt.Color\ getForegroundColor()
comment24.text=\r\n\ Returns\ the\ current\ color\ of\ the\ foreground.\r\n\ @return\ \ \ the\ color\ of\ the\ foreground\ of\ the\ Canvas\ \r\n
comment25.params=newColor
comment25.target=void\ setBackgroundColor(java.awt.Color)
comment25.text=\r\n\ Sets\ the\ background\ color\ of\ the\ Canvas.\r\n\ @param\ \ newColor\ \ \ the\ new\ color\ for\ the\ background\ of\ the\ Canvas\ \r\n
comment26.params=
comment26.target=java.awt.Color\ getBackgroundColor()
comment26.text=\r\n\ Returns\ the\ current\ color\ of\ the\ background\r\n\ @return\ \ \ the\ color\ of\ the\ background\ of\ the\ Canvas\ \r\n
comment27.params=newFont
comment27.target=void\ setFont(java.awt.Font)
comment27.text=\r\n\ changes\ the\ current\ Font\ used\ on\ the\ Canvas\r\n\ @param\ \ newFont\ \ \ new\ font\ to\ be\ used\ for\ String\ output\r\n
comment28.params=
comment28.target=java.awt.Font\ getFont()
comment28.text=\r\n\ Returns\ the\ current\ font\ of\ the\ canvas.\r\n\ @return\ \ \ \ \ the\ font\ currently\ in\ use\r\n
comment29.params=width\ height
comment29.target=void\ setSize(int,\ int)
comment29.text=\r\n\ Sets\ the\ size\ of\ the\ canvas.\r\n\ @param\ \ width\ \ \ \ new\ width\ \r\n\ @param\ \ height\ \ \ new\ height\ \r\n
comment3.params=p\ radius\ c
comment3.target=void\ plotPoint(Point,\ int,\ java.awt.Color)
comment30.params=
comment30.target=java.awt.Dimension\ getSize()
comment30.text=\r\n\ Returns\ the\ size\ of\ the\ canvas.\r\n\ @return\ \ \ \ \ The\ current\ dimension\ of\ the\ canvas\r\n
comment31.params=milliseconds
comment31.target=void\ wait(int)
comment31.text=\r\n\ Waits\ for\ a\ specified\ number\ of\ milliseconds\ before\ finishing.\r\n\ This\ provides\ an\ easy\ way\ to\ specify\ a\ small\ delay\ which\ can\ be\r\n\ used\ when\ producing\ animations.\r\n\ @param\ \ milliseconds\ \ the\ number\ \r\n
comment32.params=p
comment32.target=void\ plotPoint(Point)
comment32.text=\r\n\ Allows\ user\ to\ create\ of\ a\ point\ at\ an\ particular\ coordinate.\r\n\ \r\n\ \r\n
comment33.params=p\ diameter
comment33.target=void\ plotPoint(Point,\ int)
comment33.text=\r\n\ Plots\ the\ given\ point,\ of\ size\ radius\ on\ this\ canvas.\r\n\ Plots\ a\ point\ over\ the\ coordinate\ rather\ than\ it's\ left\ upper\ corner.\r\n\ @param\ p\ The\ Point\ to\ plot\r\n\ @param\ diameter\ The\ size\ of\ point\ to\ plot\r\n
comment34.params=
comment34.target=void\ axes()
comment34.text=\r\n\ Draws\ the\ axes\ in\ the\ middle\ of\ the\ Canvas.\r\n\ \r\n
comment35.params=
comment35.target=void\ plotRandom()
comment35.text=\r\n\ plots\ a\ random\ point\ on\ the\ plane\r\n\ \r\n
comment36.params=
comment36.target=int\ randomCoord()
comment36.text=\r\n\ @return\ -\ a\ value\ that\ is\ within\ the\ domain\ of\ the\ CartesianPlane\ (assumes\ a\ square\ plane)\r\n\ \r\n
comment37.params=
comment37.target=Point\ randomPoint()
comment37.text=\r\n\ @return\ -\ a\ Point\ with\ random\ coordinates\r\n\ \r\n
comment38.params=start\ numOfLocations
comment38.target=void\ safetyMap(Point,\ int)
comment38.text=\r\n\ Creates\ the\ safetyMap\r\n\ plots\ the\ points\ and\ changes\ the\ color\ based\ on\ the\ distance\r\n\ @param\ start\ -\ start\ of\ the\ "hot\ spot"\ of\ the\ power\ lines\r\n\ \r\n
comment4.params=visible
comment4.target=void\ setVisible(boolean)
comment4.text=\r\n\ Set\ the\ canvas\ visibility\ and\ brings\ canvas\ to\ the\ front\ of\ screen\r\n\ when\ made\ visible.\ This\ method\ can\ also\ be\ used\ to\ bring\ an\ already\r\n\ visible\ canvas\ to\ the\ front\ of\ other\ windows.\r\n\ @param\ visible\ \ boolean\ value\ representing\ the\ desired\ visibility\ of\r\n\ the\ canvas\ (true\ or\ false)\ \r\n
comment5.params=
comment5.target=boolean\ isVisible()
comment5.text=\r\n\ Provide\ information\ on\ visibility\ of\ the\ Canvas.\r\n\ @return\ \ true\ if\ canvas\ is\ visible,\ false\ otherwise\r\n
comment6.params=shape
comment6.target=void\ draw(java.awt.Shape)
comment6.text=\r\n\ Draw\ the\ outline\ of\ a\ given\ shape\ onto\ the\ canvas.\r\n\ @param\ \ shape\ \ the\ shape\ object\ to\ be\ drawn\ on\ the\ canvas\r\n
comment7.params=size
comment7.target=void\ setPenSize(int)
comment7.text=\r\n\ Sets\ the\ "pen\ size"\ to\ given\ size\ (thickness)\r\n\ @param\ size\ the\ thickness\ of\ the\ pend\r\n
comment8.params=shape
comment8.target=void\ fill(java.awt.Shape)
comment8.text=\r\n\ Fill\ the\ internal\ dimensions\ of\ a\ given\ shape\ with\ the\ current\ \r\n\ foreground\ color\ of\ the\ canvas.\r\n\ @param\ \ shape\ \ the\ shape\ object\ to\ be\ filled\ \r\n
comment9.params=xPos\ yPos\ diameter
comment9.target=void\ fillCircle(int,\ int,\ int)
comment9.text=\r\n\ Fill\ the\ internal\ dimensions\ of\ the\ given\ circle\ with\ the\ current\ \r\n\ foreground\ color\ of\ the\ canvas.\r\n
numComments=39
